knitr::opts_chunk$set(echo = FALSE)
p519_clone<-read.csv("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P519_CD4\\filtered_contig_annotations.csv")
p519_clone[1:5,1:5]
p519_clone[1:5,1:18]
colnames(p519_clone)
p519_clone_cd4<-read.csv("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P519_CD4\\filtered_contig_annotations.csv")
p519_clone_cd8<-read.csv("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P519_CD8\\iltered_contig_annotations.csv")
p519_clone_cd8<-read.csv("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P519_CD8\\filtered_contig_annotations.csv")
rm("p519_clone")
p519_clone)_cd4[1:5,1:18]
p519_clone_cd4[1:5,1:18]
p519_clone_cd8[1:5,1:18]
add_clonotype <- function(tcr_location, seurat_obj){
tcr <- read.csv(paste(tcr_folder,"filtered_contig_annotations.csv", sep=""))
# Remove the -1 at the end of each barcode.
# Subsets so only the first line of each barcode is kept,
# as each entry for given barcode will have same clonotype.
tcr$barcode <- gsub("-1", "", tcr$barcode)
tcr <- tcr[!duplicated(tcr$barcode), ]
# Only keep the barcode and clonotype columns.
# We'll get additional clonotype info from the clonotype table.
tcr <- tcr[,c("barcode", "raw_clonotype_id")]
names(tcr)[names(tcr) == "raw_clonotype_id"] <- "clonotype_id"
# Clonotype-centric info.
clono <- read.csv(paste(tcr_folder,"clonotypes.csv", sep=""))
# Slap the AA sequences onto our original table by clonotype_id.
tcr <- merge(tcr, clono[, c("clonotype_id", "cdr3s_aa")])
# Reorder so barcodes are first column and set them as rownames.
tcr <- tcr[, c(2,1,3)]
rownames(tcr) <- tcr[,1]
tcr[,1] <- NULL
# Add to the Seurat object's metadata.
clono_seurat <- AddMetaData(object=seurat_obj, metadata=tcr)
return(clono_seurat)
}
colnames(p519_clone_cd4)
colnames(p519_clone_cd8)
fullpath = getwd()
tcr <- read.csv(paste(fullpath, "filtered_contig_annotations.csv", sep=""))
tcr <- read.csv(paste(fullpath, "/filtered_contig_annotations.csv", sep=""))
library(Seurat)
library(cowplot)
library(hdf5r)
install.packages("hdf5r")
library(hdf5r)
setwd("C:\\Users\\parad\\Downloads\\vdj_v1_mm_balbc_pbmc")
balbc_pbmc <- Read10X_h5("vdj_v1_mm_balbc_pbmc_5gex_filtered_feature_bc_matrix.h5")
s_balbc_pbmc <- CreateSeuratObject(counts = balbc_pbmc, min.cells = 3, min.features = 200, project = "cellranger")
s_balbc_pbmc$percent.mito <- PercentageFeatureSet(s_balbc_pbmc, pattern = "^mt-")
add_clonotype <- function(tcr_prefix, seurat_obj, type="t"){
#读入contig_annotations.csv
tcr <- read.csv(paste(tcr_prefix,"filtered_contig_annotations.csv", sep=""))
# Remove the -1 at the end of each barcode
# tcr$barcode <- gsub("-1", "", tcr$barcode)
# Subsets so only the first line of each barcode is kept,as each entry for given barcode will have same clonotype.
tcr <- tcr[!duplicated(tcr$barcode), ]
names(tcr)[names(tcr) == "raw_clonotype_id"] <- "clonotype_id"
# Clonotype-centric info.
clono <- read.csv(paste(tcr_prefix,"clonotypes.csv", sep=""))
# Slap the AA sequences onto our original table by clonotype_id.
tcr <- merge(tcr, clono)
#Reorder so barcodes are first column and set them as rownames.
rownames(tcr) <- tcr[,2]
tcr[,2] <- NULL
colnames(tcr) <- paste(type, colnames(tcr), sep="_")
# Add to the Seurat object's metadata.
clono_seurat <- AddMetaData(object=seurat_obj, metadata=tcr)
return(clono_seurat)
}
s_balbc_pbmc <- add_clonotype("vdj_v1_mm_balbc_pbmc_t_", s_balbc_pbmc, "t")
s_balbc_pbmc <- add_clonotype("vdj_v1_mm_balbc_pbmc_b_", s_balbc_pbmc, "b")
head(s_balbc_pbmc[[]])
colnames(head(s_balbc_pbmc[[]]))
table(!is.na(s_balbc_pbmc$t_clonotype_id),!is.na(s_balbc_pbmc$b_clonotype_id))
s_balbc_pbmc <- subset(s_balbc_pbmc, cells = colnames(s_balbc_pbmc)[!(!is.na(s_balbc_pbmc$t_clonotype_id) & !is.na(s_balbc_pbmc$b_clonotype_id))])
table(!is.na(s_balbc_pbmc$t_clonotype_id),!is.na(s_balbc_pbmc$b_clonotype_id))
s_balbc_pbmc <- subset(s_balbc_pbmc, percent.mito <= 10)
s_balbc_pbmc <- subset(s_balbc_pbmc, nCount_RNA >= 500 & nCount_RNA <= 40000)
s_balbc_pbmc <- NormalizeData(s_balbc_pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
s_balbc_pbmc <- FindVariableFeatures(s_balbc_pbmc, selection.method = "vst", nfeatures = 2000)
all.genes <- rownames(s_balbc_pbmc)
s_balbc_pbmc <- ScaleData(s_balbc_pbmc, features = all.genes)
s_balbc_pbmc <- RunPCA(s_balbc_pbmc, features = VariableFeatures(object = s_balbc_pbmc))
use.pcs = 1:30
s_balbc_pbmc <- FindNeighbors(s_balbc_pbmc, dims = use.pcs)
s_balbc_pbmc <- FindClusters(s_balbc_pbmc, resolution = c(0.5))
s_balbc_pbmc <- RunUMAP(s_balbc_pbmc, dims = use.pcs)
p1 <- DimPlot(s_balbc_pbmc, reduction = "umap", label = TRUE)
p2 <-DimPlot(s_balbc_pbmc,group.by = "t_chain")
t_cell_markers <- c("Cd3d","Cd3e")
p3 <- FeaturePlot(s_balbc_pbmc, features = t_cell_markers)
p4 <- DimPlot(s_balbc_pbmc, cells.highlight = Cells(subset(s_balbc_pbmc, subset = b_cdr3s_aa == "IGH:CARWGGYGYDGGYFDYW;IGK:CGQSYSYPYTF")))
library(patchwork)
p1+p2+p3+p4
library(sankeywheel)
install.packages("sankeywheel")
library(sankeywheel)
sankeywheel(
from = s_balbc_pbmc@meta.data$t_chain, to = s_balbc_pbmc@meta.data$t_v_gene,
weight = s_balbc_pbmc@meta.data$nCount_RNA,#type = "sankey",
title = "sankeywheel",
subtitle = "chain & t_v_gene",
seriesName = "", width = "100%", height = "600px")
fullpath = getwd()
fullpath = getwd()
getwd()
setwd("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P519_CD4")
tcr <- read.csv(paste(fullpath, "G3_filtered_contig_annotations.csv", sep=""))
setwd("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P519_CD4\\")
tcr <- read.csv(paste(fullpath, "G3_filtered_contig_annotations.csv", sep=""))
tcr <- read.csv(paste(fullpath, "filtered_contig_annotations.csv", sep=""))
fullpath = getwd()
tcr <- read.csv(paste(fullpath, "filtered_contig_annotations.csv", sep=""))
getwd()
setwd("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P519_CD4\\")
tcr <- read.csv(paste(fullpath, "filtered_contig_annotations.csv", sep=""))
getwd()
tcr <- read.csv(paste(fullpath, "/filtered_contig_annotations.csv", sep=""))
head(tcr[1:5,1:5])
tcr$barcode <- gsub("-1", "", tcr$barcode)
head(tcr[1:5,1:5])
shape(tcr)
dim(tcr)
tcr <- tcr[!duplicated(tcr$barcode), ]
dim(tcr)
tcr <- tcr[,c("barcode", "raw_clonotype_id")]
names(tcr)[names(tcr) == "raw_clonotype_id"] <- "clonotype_id"
tsv<-read.csv("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P519_CD4\\filtered_feature_bc_matrix\\barcodes.tsv")
tsv<-read.txt("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P519_CD4\\filtered_feature_bc_matrix\\barcodes.tsv")
tsv<-read.table("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P519_CD4\\filtered_feature_bc_matrix\\barcodes.tsv")
tsv<-read_tsv("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P519_CD4\\filtered_feature_bc_matrix\\barcodes.tsv")
tsv<-read.tsv("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P519_CD4\\filtered_feature_bc_matrix\\barcodes.tsv")
tsv<-read.table("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P519_CD4\\filtered_feature_bc_matrix\\barcodes.tsv")
getwd()
tsv<-read.table("filtered_feature_bc_matrix\\barcodes.tsv")
n1_data <- Read10X("filtered_feature_bc_matrix")
filter_10x_object <-CreateSeuratObject(raw.data = n1_data,min.cells = 3,
min.genes = 200, project = "d615")#该函数还具有数据过滤的功能，
filter_10x_object <-CreateSeuratObject(counts= n1_data,min.cells = 3, min.genes = 200, project = "d615")#该函数还具有数据过滤的功能，
GenePlot(object = filter_10x_object, gene1 = "nUMI", gene2 = "nGene")
library(Seurat)
library(dplyr)
library(magrittr)
GenePlot(object = filter_10x_object, gene1 = "nUMI", gene2 = "nGene")
Plot(object = filter_10x_object, gene1 = "nUMI", gene2 = "nGene")
plot(object = filter_10x_object, gene1 = "nUMI", gene2 = "nGene")
??GenePlot
?GenePlot
FeatureScatter(object = filter_10x_object, gene1 = "nUMI", gene2 = "nGene")
FeatureScatter(object = filter_10x_object, feature1 = "nUMI", feature2 = "nGene")
mito.genes <- grep(pattern = "^MT-", x = rownames(x = filter_10x_object@data),
value = TRUE)#统计线粒体基因
filter_10x_object@data
filter_10x_object@data
filter_10x_object$data
VlnPlot(object = filter_10x_object, features.plot = c("nGene", "nUMI",
"percent.mito"), nCol = 3)#绘制小提琴图
filter_10x_object <-CreateSeuratObject(counts= n1_data,min.cells = 3, min.genes = 200, project = "cellranger")#该函数还具有数据过滤的功能，
FeatureScatter(object = filter_10x_object, feature1 = "nUMI", feature2 = "nGene")
add_clonotype <- function(tcr_prefix, seurat_obj, type="t"){
#读入contig_annotations.csv
tcr <- read.csv(paste(tcr_prefix,"filtered_contig_annotations.csv", sep=""))
# Remove the -1 at the end of each barcode
# tcr$barcode <- gsub("-1", "", tcr$barcode)
# Subsets so only the first line of each barcode is kept,as each entry for given barcode will have same clonotype.
tcr <- tcr[!duplicated(tcr$barcode), ]
names(tcr)[names(tcr) == "raw_clonotype_id"] <- "clonotype_id"
# Clonotype-centric info.
clono <- read.csv(paste(tcr_prefix,"clonotypes.csv", sep=""))
# Slap the AA sequences onto our original table by clonotype_id.
tcr <- merge(tcr, clono)
#Reorder so barcodes are first column and set them as rownames.
rownames(tcr) <- tcr[,2]
tcr[,2] <- NULL
colnames(tcr) <- paste(type, colnames(tcr), sep="_")
# Add to the Seurat object's metadata.
clono_seurat <- AddMetaData(object=seurat_obj, metadata=tcr)
return(clono_seurat)
}
s_balbc_pbmc <- add_clonotype("vdj_v1_mm_balbc_pbmc_t_", filter_10x_object , "t")
s_balbc_pbmc <- add_clonotype("vdj_v1_mm_balbc_pbmc_t_", filter_10x_object, "t")
setwd("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result")
list.files()
n1_data <- Read10X("P519_CD4\filtered_feature_bc_matrix")
n1_data <- Read10X("P519_CD4\\filtered_feature_bc_matrix")
n2_data <- Read10X("P519_CD8\\filtered_feature_bc_matrix")
knitr::opts_chunk$set(echo = FALSE)
setwd("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result")
list.files()
n1_data <- Read10X("P519_CD4\\filtered_feature_bc_matrix")
library(Seurat)
n1_data <- Read10X("P519_CD4\\filtered_feature_bc_matrix")
n2_data <- Read10X("P519_CD8\\filtered_feature_bc_matrix")
n3_data <- Read10X("P520_CD4\\filtered_feature_bc_matrix")
n4_data <- Read10X("P520_CD8\\filtered_feature_bc_matrix")
n5_data <- Read10X("P521_CD4\\filtered_feature_bc_matrix")
n6_data <- Read10X("P521_CD8\\filtered_feature_bc_matrix")
n1_clone_cd4<-read.csv("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P519_CD4\\filtered_contig_annotations.csv")
n2_clone_cd8<-read.csv("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P519_CD8\\filtered_contig_annotations.csv")
n3_clone_cd4<-read.csv("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P520_CD4\\filtered_contig_annotations.csv")
n4_clone_cd8<-read.csv("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P520_CD8\\filtered_contig_annotations.csv")
n5_clone_cd4<-read.csv("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P521_CD4\\filtered_contig_annotations.csv")
n6_clone_cd8<-read.csv("C:\\Users\\parad\\Desktop\\Sundry\\RStudio\\Sunyidi\\result\\P521_CD8\\filtered_contig_annotations.csv")
barcoder <- function(df, prefix,  trim="\\-1"){
df$barcode <- gsub(trim, "", df$barcode)
df$barcode <- paste0(prefix, df$barcode)
df
}
n1_clone <- barcoder(n1_clone_cd4, prefix = "n1_")
n2_clone <- barcoder(n2_clone_cd8, prefix = "n2_")
n3_clone <- barcoder(n3_clone_cd4, prefix = "n3_")
n4_clone <- barcoder(n4_clone_cd8, prefix = "n4_")
n5_clone <- barcoder(n5_clone_cd4, prefix = "n3_")
n6_clone <- barcoder(n6_clone_cd8, prefix = "n4_")
all_cln <- rbind(n1_clone,
n2_clone,
n3_clone,
n4_clone,
n5_clone,
n6_clone)
data_concater <- function(x){
x<- levels(factor(x))
paste(x, collapse = "__")
}
suppressPackageStartupMessages(library(data.table))
all_cln <- as.data.table(all_cln)
View(all_cln)
grpn = uniqueN(all_cln$barcode)
pb <- txtProgressBar(min = 0, max = grpn, style = 3)
all_cln_collapsed <- all_cln[, {setTxtProgressBar(pb,.GRP); lapply(.SD, data_concater)} , by=barcode]
View(all_cln_collapsed)
rownames(all_cln_collapsed) <- all_cln_collapsed$barcode
combined <- AddMetaData(combined, metadata = all_cln_collapsed)
